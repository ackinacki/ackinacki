---
- name: Ensures proxy dirs exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: u=rwx,g=rwx,o=rwx
  with_items:
    - "{{ PROXY_DIR }}"
    - "{{ PROXY_CERTS_DIR }}"

- name: Gather network interface facts
  ansible.builtin.setup:
    gather_subset:
      - network

- name: Copy Block Keeper keys to proxy
  ansible.builtin.copy:
    dest: "{{ PROXY_CERTS_DIR }}"
    src: "{{ item }}"
  with_list: "{{ PROXY_SIGNING_KEYS | mandatory(msg='Proxy signing key variable is required') }}"

- name: Production compose
  ansible.builtin.template:
    src: templates/compose.j2
    dest: "{{ PROXY_DIR }}/compose.yaml"
    mode: "0644"

- name: Proxy config
  ansible.builtin.template:
    src: templates/config.j2
    dest: "{{ PROXY_DIR }}/config.yaml"
    mode: "0655"

- name: Log rotate configuration
  ansible.builtin.template:
    src: templates/logrotate.j2
    dest: "{{ PROXY_DIR }}/logrotate.sh"
    mode: "0755"
  register: logrotate

- name: Compose pull
  ansible.builtin.shell:
    chdir: "{{ PROXY_DIR }}"
    cmd: docker compose pull

- name: Compose up
  ansible.builtin.shell:
    chdir: "{{ PROXY_DIR }}"
    cmd: docker compose up -d

- name: Compose restart logrotate
  ansible.builtin.shell:
    chdir: "{{ PROXY_DIR }}"
    cmd: docker compose restart logrotate
  when:
    - logrotate.changed

- name: Wait for proxy certificate to be available
  ansible.builtin.wait_for:
    path: "{{ PROXY_CERTS_DIR }}/proxy.ca.pem"
    timeout: 300
  when: CLEANUP_KEYS

- name: Wait for proxy key to be available
  ansible.builtin.wait_for:
    path: "{{ PROXY_CERTS_DIR }}/proxy.key.pem"
    timeout: 300
  when: CLEANUP_KEYS

- name: Securely shred Block Keeper keys before removal
  ansible.builtin.command:
    cmd: "shred -u '{{ PROXY_CERTS_DIR }}/{{ item | basename }}'"
  with_list: "{{ PROXY_SIGNING_KEYS }}"
  ignore_errors: yes
  when: CLEANUP_KEYS

- name: Remove Block Keeper keys after deployment
  ansible.builtin.file:
    dest: "{{ PROXY_CERTS_DIR }}/{{ item | basename }}"
    state: absent
  with_list: "{{ PROXY_SIGNING_KEYS }}"
  when: CLEANUP_KEYS
